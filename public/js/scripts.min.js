/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(1);
	
	"use strict";
	
	// Handles todos in the DOM
	var TodosList = {
	    todos: [],
	    init: function init() {
	        this.eventBinding();
	    },
	    eventBinding: function eventBinding() {
	        var taskInput = $('.task-create input');
	        var taskDelete = $('.col-delete');
	        var taskTodosDisplay = $('.task-todos-display');
	
	        // Add Todos Event
	        taskInput.on('keydown', function (event) {
	            if (event.keyCode == 13) {
	                var newTodo = event.target.value;
	                TodosList.addTodos(newTodo);
	                event.target.value = '';
	            }
	        });
	
	        // Delete Todos Event
	        taskTodosDisplay.on('click', '.col-delete', function (event) {
	            var todoToDelete = event.target.closest('.task-control');
	            TodosList.deleteTodos(todoToDelete);
	        });
	
	        // Change Status
	        taskTodosDisplay.on('click', '.fa', this.toggleStatus.bind(this));
	
	        // Change TodoText
	        // taskTodosDisplay.on('click', 'p', this.changeTodos.bind(this));
	    },
	    displayTodos: function displayTodos() {
	        var taskTodosDisplay = $('.task-todos-display');
	        taskTodosDisplay[0].innerHTML = '';
	        this.todos.forEach(function (item, position) {
	            taskTodosDisplay.append('\n                <div class="task-control" data-position="' + position + '">\n                    <div class="col">\n                        <i class="fa fa-circle-thin"></i>\n                    </div>\n                    <p> ' + item.todoText + ' </p>\n                    <div class="col-delete">\n                        <i class="fa fa-times"></i>\n                    </div>\n                </div>');
	        });
	    },
	    addTodos: function addTodos(newTodo) {
	        this.todos.push({
	            todoText: newTodo,
	            completed: false
	        });
	        this.displayTodos();
	    },
	    changeTodos: function changeTodos(event) {
	        var todoToChange = event.target.closest('.task-control');
	        var position = todoToChange.dataset.position;
	        this.todos[position].todoText = newTodo;
	        this.displayTodos();
	    },
	    deleteTodos: function deleteTodos(removeEvent) {
	        var removePosition = removeEvent.dataset.position;
	        this.todos.splice(removePosition, 1);
	        this.displayTodos();
	    },
	    toggleStatus: function toggleStatus(event) {
	        var toggleTodoWrapper = event.target.closest('.task-control');
	        var position = toggleTodoWrapper.dataset.position;
	        var todoCompleted = this.todos[position];
	
	        if (event.target.className === 'fa fa-circle-thin') {
	            event.target.className = 'fa fa-circle';
	        } else {
	            event.target.className = 'fa fa-circle-thin';
	        }
	        toggleTodoWrapper.classList.toggle('completed-task');
	        todoCompleted.completed = !todoCompleted.completed;
	    }
	};
	
	TodosList.init();
	
	// Handles AJAX Requests
	var DataHandler = {
	    init: function init() {
	        this.cacheDOM();
	        this.eventBinding();
	    },
	    cacheDOM: function cacheDOM() {
	        this.$saveTodosBtn = $('#save-todos');
	    },
	    eventBinding: function eventBinding() {
	        this.$saveTodosBtn.on('click', this.postTodos.bind(this));
	    },
	    postTodos: function postTodos() {
	        var urlPath = window.location.pathname;
	        var postData = TodosList.todos;
	
	        $.ajax({
	            type: 'POST',
	            url: '/',
	            dataType: 'json',
	            data: { 'post': JSON.stringify(postData) },
	            success: function success(data) {
	                console.log("Success");
	            },
	            error: function error(err) {
	                console.log(err);
	            }
	        });
	    }
	};
	
	DataHandler.init();

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(2);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(4)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./main.sass", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./main.sass");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(3)();
	// imports
	
	
	// module
	exports.push([module.id, "@keyframes headerColors {\n  0% {\n    color: #f7eff1; }\n  50% {\n    color: #f1f1f1; }\n  100% {\n    color: #f7eff1; } }\n\n* {\n  padding: 0;\n  margin: 0; }\n\nbody {\n  font-family: \"Raleway\";\n  background: #f9f9f9; }\n\n.header-wrapper {\n  width: 40px;\n  height: 40px;\n  background: #808080;\n  position: absolute;\n  top: 20px;\n  left: 20px;\n  border-radius: 100%;\n  overflow: hidden;\n  transition: all 200ms ease-in; }\n  .header-wrapper:hover {\n    width: 300px;\n    height: 200px;\n    border-radius: 0;\n    background: #fff;\n    box-shadow: 0 5px 20px #c8c8c8; }\n    .header-wrapper:hover .header-display {\n      opacity: 1;\n      transition: all 250ms linear 250ms; }\n\n.menu-btn {\n  width: 35px;\n  height: 35px;\n  position: relative; }\n  .menu-btn span {\n    width: 28px;\n    height: 2px;\n    background: #fff;\n    position: absolute;\n    left: 5px; }\n    .menu-btn span:nth-of-type(1) {\n      top: 14px; }\n    .menu-btn span:nth-of-type(2) {\n      top: 20px; }\n\n.header-display {\n  width: 100%;\n  height: 100%;\n  opacity: 0;\n  transition: all 200ms linear; }\n  .header-display h2 {\n    color: #f7eff1;\n    font-size: 40px;\n    font-weight: normal;\n    text-align: center;\n    padding-bottom: 10px;\n    letter-spacing: 1px; }\n  .header-display li {\n    width: auto;\n    line-height: 30px;\n    list-style: none;\n    margin-left: 30px; }\n  .header-display a {\n    color: #f1f1f1;\n    font-size: 20px;\n    font-style: italic;\n    font-weight: bold;\n    text-decoration: none;\n    transition: all 350ms linear; }\n    .header-display a:hover {\n      color: #808080; }\n\n.main-wrapper {\n  width: 100%;\n  height: 100vh; }\n\n.main-display {\n  width: 100%;\n  max-width: 450px;\n  min-width: 300px;\n  height: calc(100% - 120px);\n  margin: 0 auto;\n  padding-top: 120px; }\n\n.tasker-header-wrapper {\n  width: 100%;\n  height: auto; }\n\n.tasker-header-display {\n  width: 100%;\n  height: 100%;\n  text-align: center; }\n  .tasker-header-display h1 {\n    color: #f7eff1;\n    font-size: 100px;\n    font-weight: lighter;\n    animation: headerColors 5s ease-in-out infinite; }\n\n.task-wrapper {\n  width: 100%;\n  height: auto;\n  background: #fff; }\n\n.task-display {\n  width: 100%;\n  height: 100%; }\n\n.task-create {\n  width: 100%;\n  height: 60px;\n  border-bottom: 2px solid #f1f1f1;\n  display: table; }\n  .task-create input {\n    width: 80%;\n    height: 60px;\n    color: #808080;\n    font-size: 20px;\n    font-style: italic;\n    outline: none;\n    border: none;\n    display: table-cell;\n    padding: 0 1%; }\n  .task-create input::-webkit-input-placeholder {\n    color: #f1f1f1; }\n\n.task-control {\n  width: 100%;\n  height: 60px;\n  border-bottom: 2px solid #f1f1f1;\n  display: table; }\n  .task-control.completed-task {\n    opacity: 0.4; }\n  .task-control p {\n    width: 80%;\n    height: 100%;\n    color: #808080;\n    display: table-cell;\n    font-size: 20px;\n    font-weight: bold;\n    display: table-cell;\n    vertical-align: middle; }\n\n.col {\n  width: 10%;\n  display: table-cell;\n  text-align: center;\n  vertical-align: middle;\n  cursor: pointer; }\n\n.col-delete {\n  width: 10%;\n  height: 100%;\n  display: table-cell;\n  text-align: center;\n  font-style: bold;\n  vertical-align: middle;\n  cursor: pointer;\n  transition: all 350ms linear; }\n  .col-delete:hover i {\n    color: #e53935; }\n  .col-delete i {\n    color: #808080;\n    transition: all 350ms linear; }\n\n.tasker-buttons {\n  width: 100%;\n  height: 50px;\n  display: table; }\n  .tasker-buttons button {\n    color: #f1f1f1;\n    font-size: 18px;\n    font-weight: bold;\n    outline: none;\n    box-shadow: none;\n    border: none;\n    background: transparent;\n    padding-top: 15px;\n    padding-left: 15px;\n    cursor: pointer;\n    transition: all 350ms linear; }\n    .tasker-buttons button:hover {\n      color: #808080; }\n\n.form-wrapper {\n  width: 100%;\n  height: auto;\n  padding-top: 60px; }\n\n.form-display {\n  width: 100%;\n  height: 100%;\n  padding: 60px 0;\n  text-align: center; }\n  .form-display h2 {\n    color: #f7eff1;\n    font-size: 100px;\n    font-weight: lighter;\n    padding: 10px 0; }\n\n.form-container {\n  width: 95%;\n  height: auto;\n  max-width: 450px;\n  margin: 0 auto;\n  text-align: center; }\n\n.form-control {\n  width: 95%;\n  height: 50px;\n  background: #fff;\n  display: table;\n  padding: 3px 0;\n  margin: 2px auto; }\n  .form-control input {\n    width: 90%;\n    height: 100%;\n    color: #808080;\n    font-size: 20px;\n    font-style: italic;\n    background: transparent;\n    padding: 0 1% 0 30px;\n    border: none; }\n    .form-control input:focus {\n      outline: none;\n      border: none; }\n  .form-control input::-webkit-input-placeholder {\n    color: #f1f1f1; }\n  .form-control button {\n    width: 95%;\n    height: 30px;\n    color: #f1f1f1;\n    font-size: 20px;\n    font-weight: bold;\n    padding-top: 10px;\n    background: transparent;\n    outline: none;\n    border: none;\n    cursor: pointer;\n    transition: all 350ms linear; }\n    .form-control button:hover {\n      color: #808080; }\n", ""]);
	
	// exports


/***/ },
/* 3 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,